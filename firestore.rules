rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the current user is a member of a specific list
    function isListMember(listId) {
      return get(/databases/$(database)/documents/lists/$(listId)).data.members[request.auth.uid] != null;
    }

    // Users can only read and write their own user document.
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Products can be read by any authenticated user.
    // Products can only be created by authenticated users.
    // Products can only be updated/deleted by the user who created them.
    match /products/{productId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    // Lists can be created by a user if they set themselves as the owner.
    // Lists can be read, updated, or deleted only by users in the 'members' map.
    match /lists/{listId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.members;

      // Rules for the subcollection of items
      // Allow read/write on items only if the user is a member of the parent list.
      match /items/{itemId} {
        allow read, write: if request.auth != null && isListMember(listId);
      }
    }

    // Users can create error logs, but cannot read, update, or delete any.
    match /error_logs/{logId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false;
    }

    // Users can only create notifications scheduled for themselves.
    // No one can read, update, or delete from the client.
    match /scheduled_notifications/{notificationId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if false;
    }
  }
}
